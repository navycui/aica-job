{"ast":null,"code":"var _jsxFileName = \"/Users/choi/react-workspace/front-admin-cmm-def/packages/shared/src/components/ModalComponents.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Button, Modal, Stack } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport { styled } from '@mui/styles';\nimport { VerticalInterval } from '../components/LayoutComponents';\nimport { Icons } from '../components/IconContainer';\nimport { CustomButton } from '../components/ButtonComponents';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const ModalComponents = props => {\n  _s();\n\n  const {\n    type,\n    isDist\n  } = props;\n  let confirmLabel = \"\";\n\n  if (type == \"normal\") {\n    confirmLabel = \"확인\";\n  } else if (type == \"save\") {\n    confirmLabel = \"저장\";\n  } else if (type == \"transmit\") {\n    confirmLabel = \"전송\";\n  } else if (type == 'preview') {\n    confirmLabel = '닫기';\n  } else {\n    confirmLabel = \"예\";\n  }\n\n  const handlerConfirm = event => {\n    if (props.onConfirm) props.onConfirm();\n  };\n\n  const handlerExit = event => {\n    if (props.onClose) props.onClose();\n  };\n\n  const handlerModalClose = (event, reason) => {\n    if (props.onClose) props.onClose();\n  };\n\n  useEffect(() => {\n    if (props.open) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n  }, [props.open]);\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Modal, {\n    disableScrollLock: true,\n    open: props.open,\n    onClose: handlerModalClose,\n    hideBackdrop: props.hideBackdrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(ModalBoxContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Stack, {\n    justifyContent: 'space-between',\n    flexDirection: 'column',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Box, {\n    style: {\n      display: 'flex',\n      justifyContent: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(Button, {\n    style: {\n      width: '24px',\n      height: '24px'\n    },\n    onClick: handlerExit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(Icons.Exit, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 20\n    }\n  }))), ___EmotionJSX(Box, {\n    sx: {\n      pb: '32px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, props.children ? ___EmotionJSX(React.Fragment, null, props.title ? ___EmotionJSX(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 23\n    }\n  }, props.title) : ___EmotionJSX(VerticalInterval, {\n    size: '40px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 23\n    }\n  }), props.children) : ___EmotionJSX(React.Fragment, null, props.title ? ___EmotionJSX(\"h2\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 23\n    }\n  }, props.title) : ___EmotionJSX(VerticalInterval, {\n    size: '40px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 23\n    }\n  }), ___EmotionJSX(\"p\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, props.content))), ___EmotionJSX(Stack, {\n    justifyContent: type === 'preview' ? 'space-between' : 'center',\n    direction: 'row',\n    spacing: '10px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, isDist || ___EmotionJSX(CustomButton, {\n    type: 'large',\n    label: props.cancelLabel || '취소',\n    color: props.outlined ? 'outlined' : 'primary',\n    onClick: handlerExit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }\n  }), type === 'preview' && ___EmotionJSX(CustomButton, {\n    type: 'large',\n    color: 'outlined',\n    label: '오늘은 그만보기',\n    onClick: handlerExit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }), ___EmotionJSX(CustomButton, {\n    label: confirmLabel,\n    onClick: handlerConfirm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }))))));\n};\n\n_s(ModalComponents, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ModalComponents;\nconst ModalBoxContainer = styled(Box)({\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  minWidth: '480px',\n  backgroundColor: 'white',\n  borderRadius: '20px',\n  margin: '18px 220px 18px 0',\n  padding: '40px 40px 60px'\n});\n_c2 = ModalBoxContainer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModalComponents\");\n$RefreshReg$(_c2, \"ModalBoxContainer\");","map":{"version":3,"names":["React","useEffect","Button","Modal","Stack","Box","styled","VerticalInterval","Icons","CustomButton","ModalComponents","props","type","isDist","confirmLabel","handlerConfirm","event","onConfirm","handlerExit","onClose","handlerModalClose","reason","open","document","body","style","overflow","hideBackdrop","display","justifyContent","width","height","pb","children","title","textAlign","content","cancelLabel","outlined","ModalBoxContainer","position","top","left","transform","minWidth","backgroundColor","borderRadius","margin","padding"],"sources":["/Users/choi/react-workspace/front-admin-cmm-def/packages/shared/src/components/ModalComponents.tsx"],"sourcesContent":["import React, {CSSProperties, useEffect} from 'react';\nimport {Button, Modal, Stack} from '@mui/material';\nimport Box from '@mui/material/Box';\nimport {styled} from '@mui/styles';\nimport {VerticalInterval} from '../components/LayoutComponents';\nimport {Icons} from '../components/IconContainer';\nimport {CustomButton} from '../components/ButtonComponents';\n\nexport type ModalType = 'normal' | 'confirm' | 'save' | 'transmit' | 'preview';\n\nexport type ModalParam = {\n  open: boolean;\n  content?: string;\n  type?: string;\n  hideBackdrop?: boolean;\n  title?: string;\n  isDist?: boolean;\n  confirmLabel?: string\n  cancelLabel?: string\n  outlined?: boolean\n  onConfirm?: () => void;\n  onClose?: () => void;\n  style?: CSSProperties;\n}\n\nexport const ModalComponents: React.FC<ModalParam> = (props) => {\n    const {type, isDist} = props;\n    let confirmLabel = \"\"\n    if (type == \"normal\") {\n      confirmLabel = \"확인\";\n    } else if (type == \"save\") {\n      confirmLabel = \"저장\";\n    } else if (type == \"transmit\") {\n      confirmLabel = \"전송\";\n    } else if (type == 'preview') {\n      confirmLabel = '닫기'\n    } else {\n      confirmLabel = \"예\";\n    }\n\n    const handlerConfirm = (event: React.MouseEvent<HTMLElement>) => {\n      if (props.onConfirm) props.onConfirm();\n    };\n\n    const handlerExit = (event: React.MouseEvent<HTMLElement>) => {\n      if (props.onClose) props.onClose();\n    };\n\n    const handlerModalClose = (\n      event: {},\n      reason: 'backdropClick' | 'escapeKeyDown'\n    ) => {\n      if (props.onClose) props.onClose();\n    };\n\n    useEffect(() => {\n      if (props.open) {\n        document.body.style.overflow = 'hidden';\n      } else {\n        document.body.style.overflow = 'unset';\n      }\n    }, [props.open])\n\n    return (\n      <>\n        <Modal\n          disableScrollLock\n          open={props.open}\n          onClose={handlerModalClose}\n          hideBackdrop={props.hideBackdrop}\n        >\n          <ModalBoxContainer>\n            <Stack justifyContent={'space-between'} flexDirection={'column'}>\n              <Box style={{display: 'flex', justifyContent: 'right'}}>\n                <Button\n                  style={{width: '24px', height: '24px'}}\n                  onClick={handlerExit}\n                >\n                  {<Icons.Exit/>}\n                </Button>\n              </Box>\n\n              <Box sx={{pb: '32px'}}>\n                {props.children ? (\n                  <>\n                    {props.title ? (\n                      <h2>{props.title}</h2>\n                    ) : (\n                      <VerticalInterval size={'40px'}/>\n                    )}\n                    {props.children}\n                  </>\n                ) : (\n                  <>\n                    {props.title ? (\n                      <h2 style={{textAlign: 'center'}}>{props.title}</h2>\n                    ) : (\n                      <VerticalInterval size={'40px'}/>\n                    )}\n                    <p style={{textAlign: 'center'}}>{props.content}</p>\n                  </>\n                )}\n              </Box>\n\n              <Stack justifyContent={type === 'preview' ? 'space-between' : 'center'} direction={'row'} spacing={'10px'}>\n                {isDist || (\n                  <CustomButton\n                    type={'large'}\n                    label={props.cancelLabel || '취소'}\n                    color={props.outlined ? 'outlined' : 'primary'}\n                    onClick={handlerExit}\n                  />\n                )}\n                {\n                  type === 'preview' && (\n                    <CustomButton\n                      type={'large'} color={'outlined'}\n                      label={'오늘은 그만보기'}\n                      onClick={handlerExit}\n                    />\n                  )}\n                <CustomButton label={confirmLabel} onClick={handlerConfirm}/>\n              </Stack>\n            </Stack>\n          </ModalBoxContainer>\n        </Modal>\n      </>\n    );\n  }\n;\n\nconst ModalBoxContainer = styled(Box)({\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  minWidth: '480px',\n  backgroundColor: 'white',\n  borderRadius: '20px',\n  margin: '18px 220px 18px 0',\n  padding: '40px 40px 60px',\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}