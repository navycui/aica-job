{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { hydrate } from '../core';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useHydrate(state, options) {\n  _s();\n\n  var queryClient = useQueryClient();\n  var optionsRef = React.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React.useMemo(function () {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\n\n_s(useHydrate, \"GoX/6Vc5WXtWaHmBy1Fm7fcVW44=\", false, function () {\n  return [useQueryClient];\n});\n\nexport var Hydrate = function Hydrate(_ref) {\n  _s2();\n\n  var children = _ref.children,\n      options = _ref.options,\n      state = _ref.state;\n  useHydrate(state, options);\n  return children;\n};\n\n_s2(Hydrate, \"c4o1xNb66aUTR+KBFK9Nlfx/mpI=\", false, function () {\n  return [useHydrate];\n});\n\n_c = Hydrate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hydrate\");","map":{"version":3,"names":["React","hydrate","useQueryClient","useHydrate","state","options","queryClient","optionsRef","useRef","current","useMemo","Hydrate","_ref","children"],"sources":["/Users/choi/react-workspace/front-admin-cmm-def/node_modules/react-query/es/react/Hydrate.js"],"sourcesContent":["import React from 'react';\nimport { hydrate } from '../core';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useHydrate(state, options) {\n  var queryClient = useQueryClient();\n  var optionsRef = React.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React.useMemo(function () {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\nexport var Hydrate = function Hydrate(_ref) {\n  var children = _ref.children,\n      options = _ref.options,\n      state = _ref.state;\n  useHydrate(state, options);\n  return children;\n};"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoC;EAAA;;EACzC,IAAIC,WAAW,GAAGJ,cAAc,EAAhC;EACA,IAAIK,UAAU,GAAGP,KAAK,CAACQ,MAAN,CAAaH,OAAb,CAAjB;EACAE,UAAU,CAACE,OAAX,GAAqBJ,OAArB,CAHyC,CAGX;EAC9B;EACA;EACA;;EAEAL,KAAK,CAACU,OAAN,CAAc,YAAY;IACxB,IAAIN,KAAJ,EAAW;MACTH,OAAO,CAACK,WAAD,EAAcF,KAAd,EAAqBG,UAAU,CAACE,OAAhC,CAAP;IACD;EACF,CAJD,EAIG,CAACH,WAAD,EAAcF,KAAd,CAJH;AAKD;;GAbeD,U;UACID,c;;;AAapB,OAAO,IAAIS,OAAO,GAAG,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;EAAA;;EAC1C,IAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;EAAA,IACIR,OAAO,GAAGO,IAAI,CAACP,OADnB;EAAA,IAEID,KAAK,GAAGQ,IAAI,CAACR,KAFjB;EAGAD,UAAU,CAACC,KAAD,EAAQC,OAAR,CAAV;EACA,OAAOQ,QAAP;AACD,CANM;;IAAIF,O;UAITR,U;;;KAJSQ,O"},"metadata":{},"sourceType":"module"}