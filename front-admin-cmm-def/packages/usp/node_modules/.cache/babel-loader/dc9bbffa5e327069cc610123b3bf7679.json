{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n/* eslint-disable import/no-anonymous-default-export */\nimport axios from 'axios';\nimport authentication from '../authentication';\nimport async from 'async';\nimport { useQuery } from \"react-query\";\nimport dayjs from \"../libs/dayjs\";\nconst q = async.queue(function (task, callback) {\n  console.log(task);\n  setTimeout(callback, 3000);\n}, 2);\nconst xhr = axios.create();\nxhr.defaults.withCredentials = true;\nxhr.defaults.timeout = 1000 * 5 * 60; // 5분\n\nconst process = {};\nlet config = null;\nexport const setup = params => {\n  config = params;\n};\nexport const getBaseUrl = () => config.baseURL; //* 성공, 실패 모두 키값 삭제\n\nfunction clear(res) {\n  var _res$config;\n\n  const key = (_res$config = res.config) === null || _res$config === void 0 ? void 0 : _res$config.url;\n  delete process[key];\n  return res;\n}\n\nexport default (async req => {\n  if (!config) {\n    console.error('API Config 설정을 먼저 해야 합니다.');\n  }\n\n  const token = authentication.getToken();\n  let headers = {};\n\n  if (token) {\n    headers = {\n      Auth: 'Bearer ' + token\n    };\n  } //* 요청한 URL로 이미 진행 중인 API 가 있다면, 진행 중인 Promise 반환\n\n\n  const key = req.url;\n  if (process[key]) return process[key];\n  process[key] = xhr({\n    headers: headers,\n    ...config,\n    ...req\n  });\n  return process[key].then(clear).catch(e => Promise.reject(clear(e)));\n});\nexport const TokenUpdate = async () => {\n  const certificate = authentication.get();\n  const left = dayjs(certificate.accessTokenExpiresAt).diff(+new Date(), 's');\n\n  if (left > 0 && certificate.accessToken && dayjs().diff(certificate.updateAt, 's') > 1) {\n    try {\n      const res = await xhr.post('/member/api/login/refresh-token/insider', undefined, {\n        headers: Headers(),\n        baseURL: `${process.env.REACT_APP_DOMAIN_MEMBER_BNET}`\n      });\n      authentication.set(res.data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  } else if (!certificate) {// const res = await xhr.post('/member/api/login/refresh-token/insider', undefined, {\n    //   headers: Headers(),\n    //   baseURL: `${process.env.REACT_APP_DOMAIN_MEMBER_BNET}`,\n    // })\n    // authentication.set(res.data);\n  }\n\n  return false;\n};\n_c = TokenUpdate;\n\nconst Headers = type => {\n  const token = authentication.getToken();\n  const headers = {\n    'Content-Type': 'application/json;charset=UTF-8'\n  };\n  if (type && type == \"formData\") headers['Content-Type'] = 'multipart/form-data';\n\n  if (token) {\n    headers['Auth'] = `Bearer ${token}`;\n  }\n\n  return headers;\n};\n\n_c2 = Headers;\n\nconst _request = async (type, url, data, opts) => {\n  // 토큰 갱신\n  const isUpdate = await TokenUpdate(); // if (!isUpdate) return;\n\n  let resData = null;\n  const headers = Headers(opts === null || opts === void 0 ? void 0 : opts.contentType);\n  const start = new Date(Date.now()); // console.log('headers - ', headers)\n\n  try {\n    let res = null;\n\n    if (type === 'GET') {\n      res = await xhr.get(url, { ...config,\n        baseURL: opts && opts.baseURL ? opts.baseURL : config.baseURL,\n        headers: headers,\n        params: data,\n        responseType: opts && opts.responseType,\n        paramsSerializer: paramsObj => {\n          const params = new URLSearchParams();\n\n          for (const key in paramsObj) {\n            if (paramsObj[key] !== undefined) params.append(key, paramsObj[key]);\n          }\n\n          return params.toString();\n        }\n      });\n    } else if (type === 'POST') {\n      res = await xhr.post(url, data, { ...config,\n        headers: headers,\n        baseURL: opts && opts.baseURL ? opts.baseURL : config.baseURL,\n        cancelToken: opts && opts.cancelRef && new axios.CancelToken(opts.cancelRef)\n      });\n    } else if (type === 'DELETE') {\n      res = await xhr.delete(url, { ...config,\n        data: data,\n        headers: headers,\n        cancelToken: opts && opts.cancelRef && new axios.CancelToken(opts.cancelRef)\n      });\n    } else if (type === 'PUT') {\n      res = await xhr.put(url, data, { ...config,\n        headers: headers,\n        cancelToken: opts && opts.cancelRef && new axios.CancelToken(opts.cancelRef)\n      });\n    }\n\n    resData = res.data;\n\n    if (res.status == 200) {\n      if (resData) resData.success = true;else resData = {\n        success: true,\n        headers: res.headers.toString() || ''\n      };\n    }\n  } catch (e) {\n    clear(e); // cancelRef를 사용해서 요청을 취소시켰을 경우\n\n    if (axios.isCancel(e)) {\n      console.debug(['API CANCEL', {\n        url\n      }]); // @ts-ignore\n\n      throw [{\n        message: e.message,\n        url\n      }];\n    } // status가 200이 아닌 모든 경우\n    // @ts-ignore\n\n\n    const {\n      data,\n      status\n    } = e.response;\n\n    if (status === 403 || status === 401) {\n      alert(data.message);\n      throw [{\n        message: 'Access Denied',\n        url\n      }];\n    }\n\n    if (status == 500) alert(data.message);\n    if (status == 400) alert(data.message);\n    console.warn(['API ERROR', {\n      url,\n      status,\n      data\n    }]);\n    throw [{\n      message: 'ERROR',\n      url\n    }];\n  } // 서버에서 반환된 에러 처리\n  // GET은 서버 정의 에러가 없으며 문제가 발생한다면 null이 반환된다\n  // if (type == 'POST' && resData && !resData.success) {\n  //   throw resData.errors;\n  // }\n\n\n  return resData;\n};\n\nexport const AxiosGet = async (url, param, reqOpts) => {\n  return await _request('GET', url, param, reqOpts);\n};\n_c3 = AxiosGet;\nexport const AxiosPost = async (url, data, reqOpts) => {\n  return await _request('POST', url, data, reqOpts);\n};\n_c4 = AxiosPost;\nexport const AxiosDelete = async (url, data, reqOpts) => {\n  return await _request('DELETE', url, data, reqOpts);\n};\n_c5 = AxiosDelete;\nexport const AxiosPut = async (url, data, reqOpts) => {\n  return await _request('PUT', url, data, reqOpts);\n};\n/* react-query를 사용해서 Axios통신. */\n\n_c6 = AxiosPut;\nexport const GetQuery = (url, data, reqOpts, queryOpts) => {\n  _s();\n\n  return useQuery([url, data], async () => await _request('GET', url, data, reqOpts), queryOpts);\n};\n\n_s(GetQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\n_c7 = GetQuery;\nexport const PostQuery = (url, data, reqOpts, queryOpts) => {\n  _s2();\n\n  return useQuery([url, data], () => _request('POST', url, data, reqOpts), queryOpts);\n};\n\n_s2(PostQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\n_c8 = PostQuery;\nexport const DeleteQuery = (url, data, reqOpts, queryOpts) => {\n  _s3();\n\n  return useQuery([url, data], () => _request('DELETE', url, data, reqOpts), queryOpts);\n};\n\n_s3(DeleteQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\n_c9 = DeleteQuery;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"TokenUpdate\");\n$RefreshReg$(_c2, \"Headers\");\n$RefreshReg$(_c3, \"AxiosGet\");\n$RefreshReg$(_c4, \"AxiosPost\");\n$RefreshReg$(_c5, \"AxiosDelete\");\n$RefreshReg$(_c6, \"AxiosPut\");\n$RefreshReg$(_c7, \"GetQuery\");\n$RefreshReg$(_c8, \"PostQuery\");\n$RefreshReg$(_c9, \"DeleteQuery\");","map":{"version":3,"names":["axios","authentication","async","useQuery","dayjs","q","queue","task","callback","console","log","setTimeout","xhr","create","defaults","withCredentials","timeout","process","config","setup","params","getBaseUrl","baseURL","clear","res","key","url","req","error","token","getToken","headers","Auth","then","catch","e","Promise","reject","TokenUpdate","certificate","get","left","accessTokenExpiresAt","diff","Date","accessToken","updateAt","post","undefined","Headers","env","REACT_APP_DOMAIN_MEMBER_BNET","set","data","type","_request","opts","isUpdate","resData","contentType","start","now","responseType","paramsSerializer","paramsObj","URLSearchParams","append","toString","cancelToken","cancelRef","CancelToken","delete","put","status","success","isCancel","debug","message","response","alert","warn","AxiosGet","param","reqOpts","AxiosPost","AxiosDelete","AxiosPut","GetQuery","queryOpts","PostQuery","DeleteQuery"],"sources":["/Users/choi/react-workspace/front-admin-cmm-def/packages/shared/src/libs/axios.ts"],"sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport axios, {AxiosRequestConfig, AxiosResponse, Canceler, ResponseType} from 'axios';\nimport authentication from '../authentication';\nimport async from 'async';\nimport {useInfiniteQuery, useMutation, useQuery} from \"react-query\";\nimport {BaseResponse, ErrorMessage} from '../utils/Model';\nimport dayjs from \"../libs/dayjs\";\nimport {UseInfiniteQueryOptions} from \"react-query/types/react/types\";\n\nconst q = async.queue(function (task: any, callback) {\n  console.log(task);\n  setTimeout(callback, 3000);\n}, 2);\nconst xhr = axios.create();\nxhr.defaults.withCredentials = true;\nxhr.defaults.timeout = 1000 * 5 * 60; // 5분\n\nconst process: { [key: string]: any } = {};\n\nexport type {AxiosRequestConfig, AxiosResponse};\n\nlet config: any = null;\nexport const setup = (params: AxiosRequestConfig) => {\n  config = params;\n};\nexport const getBaseUrl = () => config.baseURL\n\n//* 성공, 실패 모두 키값 삭제\nfunction clear(res: any) {\n  const key = res.config?.url;\n  delete process[key];\n\n  return res;\n}\n\nexport default async (req: AxiosRequestConfig<any>) => {\n  if (!config) {\n    console.error('API Config 설정을 먼저 해야 합니다.');\n  }\n  const token = authentication.getToken();\n  let headers = {};\n  if (token) {\n    headers = {Auth: 'Bearer ' + token};\n  }\n\n  //* 요청한 URL로 이미 진행 중인 API 가 있다면, 진행 중인 Promise 반환\n  const key: any = req.url;\n  if (process[key]) return process[key];\n\n  process[key] = xhr({headers: headers, ...config, ...req});\n  return process[key].then(clear).catch((e: any) => Promise.reject(clear(e)));\n};\n\nexport type RequestCancelRef = (cancel: Canceler) => void\nexport type ContentType = \"json\" | \"formData\"\ntype RequestOptions = {\n  contentType?: ContentType\n  responseType?: ResponseType\n  cancelRef?: RequestCancelRef\n  baseURL?: string\n}\n\nexport const TokenUpdate = async () => {\n  const certificate = authentication.get();\n  const left = dayjs(certificate.accessTokenExpiresAt).diff(+new Date(), 's')\n\n  if (\n    left > 0 && certificate.accessToken &&\n    dayjs().diff(certificate.updateAt, 's') > 1\n  ) {\n    try {\n      const res = await xhr.post('/member/api/login/refresh-token/insider', undefined, {\n        headers: Headers(),\n        baseURL: `${process.env.REACT_APP_DOMAIN_MEMBER_BNET}`,\n      })\n      authentication.set(res.data);\n\n      return true;\n    } catch (e) {\n      return false;\n    }\n  } else if (!certificate) {\n\n    // const res = await xhr.post('/member/api/login/refresh-token/insider', undefined, {\n    //   headers: Headers(),\n    //   baseURL: `${process.env.REACT_APP_DOMAIN_MEMBER_BNET}`,\n    // })\n    // authentication.set(res.data);\n  }\n  return false;\n}\n\nconst Headers = (type?: ContentType) => {\n  const token = authentication.getToken();\n  const headers: any = {\n    'Content-Type': 'application/json;charset=UTF-8'\n  };\n\n  if (type && type == \"formData\")\n    headers['Content-Type'] = 'multipart/form-data'\n  if (token) {\n    headers['Auth'] = `Bearer ${token}`;\n  }\n\n  return headers;\n}\n\nconst _request = async (\n  type: 'GET' | 'POST' | 'DELETE' | 'PUT',\n  url: string,\n  data?: any,\n  opts?: RequestOptions,\n): Promise<any> => {\n  // 토큰 갱신\n  const isUpdate = await TokenUpdate();\n  // if (!isUpdate) return;\n\n  let resData: BaseResponse | null = null;\n  const headers = Headers(opts?.contentType)\n  const start: Date = new Date(Date.now())\n\n  // console.log('headers - ', headers)\n  try {\n    let res = null;\n\n    if (type === 'GET') {\n      res = await xhr.get(url, {\n        ...config,\n        baseURL: opts && opts.baseURL ? opts.baseURL : config.baseURL,\n        headers: headers, params: data,\n        responseType: opts && opts.responseType,\n        paramsSerializer: paramsObj => {\n          const params = new URLSearchParams()\n          for ( const key in paramsObj) {\n            if(paramsObj[key] !== undefined)\n            params.append(key, paramsObj[key])\n          }\n          return params.toString();\n        }\n      })\n    } else if (type === 'POST') {\n      res = await xhr.post(url, data, {\n        ...config,\n        headers: headers,\n        baseURL: opts && opts.baseURL ? opts.baseURL : config.baseURL,\n        cancelToken: opts && opts.cancelRef && new axios.CancelToken(opts.cancelRef),\n      })\n    } else if (type === 'DELETE') {\n      res = await xhr.delete(url, {\n        ...config,\n        data: data,\n        headers: headers,\n        cancelToken: opts && opts.cancelRef && new axios.CancelToken(opts.cancelRef),\n      })\n    } else if (type === 'PUT') {\n      res = await xhr.put(url, data, {\n        ...config,\n        headers: headers,\n        cancelToken: opts && opts.cancelRef && new axios.CancelToken(opts.cancelRef),\n      })\n    }\n\n    resData = res!.data\n    if (res!.status == 200) {\n      if (resData) resData.success = true\n      else resData = {success: true, headers: res!.headers.toString() || ''}\n    }\n\n  } catch (e) {\n    clear(e);\n\n    // cancelRef를 사용해서 요청을 취소시켰을 경우\n    if (axios.isCancel(e)) {\n      console.debug(['API CANCEL', {url}]);\n      // @ts-ignore\n      throw [{message: e.message, url}];\n    }\n\n    // status가 200이 아닌 모든 경우\n    // @ts-ignore\n    const {data, status} = e.response;\n    if (status === 403 || status === 401) {\n      alert(data.message)\n      throw [{message: 'Access Denied', url} as ErrorMessage];\n    }\n\n    if (status == 500) alert(data.message)\n    if (status == 400) alert(data.message)\n\n    console.warn(['API ERROR', {url, status, data}]);\n    throw [{message: 'ERROR', url} as ErrorMessage];\n  }\n\n  // 서버에서 반환된 에러 처리\n  // GET은 서버 정의 에러가 없으며 문제가 발생한다면 null이 반환된다\n  // if (type == 'POST' && resData && !resData.success) {\n  //   throw resData.errors;\n  // }\n  return resData;\n}\n\nexport const AxiosGet = async (url: string, param?: any, reqOpts?: RequestOptions) => {\n  return await _request('GET', url, param, reqOpts);\n}\n\nexport const AxiosPost = async (url: string, data?: any, reqOpts?: RequestOptions) => {\n  return await _request('POST', url, data, reqOpts);\n}\n\nexport const AxiosDelete = async (url: string, data?: any, reqOpts?: RequestOptions) => {\n  return await _request('DELETE', url, data, reqOpts);\n}\n\nexport const AxiosPut = async (url: string, data?: any, reqOpts?: RequestOptions) => {\n  return await _request('PUT', url, data, reqOpts);\n}\n\n/* react-query를 사용해서 Axios통신. */\nexport const GetQuery = (url: string, data?: any, reqOpts?: RequestOptions, queryOpts?: any) => {\n  return useQuery([url, data], async () => await _request('GET', url, data, reqOpts), queryOpts);\n}\n\nexport const PostQuery = (url: string, data?: any, reqOpts?: RequestOptions, queryOpts?: any) => {\n  return useQuery([url, data], () => _request('POST', url, data, reqOpts), queryOpts);\n}\n\nexport const DeleteQuery = (url: string, data?: any, reqOpts?: RequestOptions, queryOpts?: any) => {\n  return useQuery([url, data], () => _request('DELETE', url, data, reqOpts), queryOpts);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}